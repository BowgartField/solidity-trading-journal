{
  "language": "Solidity",
  "sources": {
    "Contracts/TradingJournal.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\r\npragma solidity ^0.8.7;\r\npragma abicoder v2;\r\n\r\nimport \"../Structs/Trade.sol\";\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\n\r\ncontract TradingJournal is Ownable{\r\n\r\n    address journalOwner;\r\n    Trade[] trades;\r\n\r\n    constructor(address _journalOwner){\r\n        journalOwner = _journalOwner;\r\n    }\r\n\r\n    function addTrade(Trade memory trade) public onlyOwner{\r\n        trades.push(trade);\r\n    }\r\n\r\n    function changeJournalOwner(address _journalOwner, address _newJournalOwner) public onlyOwner{\r\n\r\n        // TODO: mettre des require dans la fonction qui va apeller celle-ci\r\n\r\n        require(journalOwner == _journalOwner);\r\n        journalOwner = _newJournalOwner;\r\n    }\r\n    \r\n}\r\n\r\n\r\n"
    },
    "Structs/Trade.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\r\npragma solidity ^0.8.7;\r\n\r\nstruct Trade{\r\n    string name;\r\n    string symbol;\r\n\r\n    uint256 amountBuy;\r\n\r\n    uint256 buyDate;\r\n    uint256 buyPrice;\r\n\r\n    uint256 stopLossPrice;\r\n\r\n    uint256 sellDate;\r\n    uint256 sellPrice;\r\n\r\n}\r\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _setOwner(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _setOwner(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _setOwner(newOwner);\n    }\n\n    function _setOwner(address newOwner) private {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "Contracts/TradingJournalApp.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\r\npragma solidity ^0.8.7;\r\n\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"./TradingJournal.sol\";\r\nimport \"../Structs/UserJournal.sol\";\r\n\r\ncontract TradingJournalApp is Ownable {\r\n    // Associate journals to user, and journal's name to address\r\n    mapping(address => mapping(string => UserJournal)) public userToJournal;\r\n\r\n    event JournalCreated(address journalAddress, address creator, string Name);\r\n    // TODO: Complete event\r\n    event TradeAdded();\r\n\r\n    function Exists(string memory _journalName) public view returns(bool exists){\r\n        return userToJournal[msg.sender][_journalName].initialized;\r\n    }\r\n\r\n    function createJournal(string memory _JournalName) public {\r\n        require(bytes(_JournalName).length != 0,\"TradingJournalApp::Journal's name cannot be empty\");\r\n        require(!Exists(_JournalName),\"TradingJournalApp::Journal already exist\");\r\n\r\n        // Create new journal for user\r\n        address newTradingJournalAddr = address(new TradingJournal(msg.sender)); \r\n        \r\n        UserJournal storage newUserJournal = userToJournal[msg.sender][_JournalName];\r\n\r\n        newUserJournal.initialized = true;\r\n        newUserJournal.journalAddress = newTradingJournalAddr;\r\n\r\n        emit JournalCreated(newTradingJournalAddr,msg.sender,_JournalName);\r\n        \r\n    }\r\n\r\n    function addTrade(string memory _journalName, Trade memory trade) public {\r\n        require(Exists(_journalName),\"TradingJournalApp::Journal don't exist\");\r\n\r\n        TradingJournal(userToJournal[msg.sender][_journalName].journalAddress).addTrade(trade);\r\n\r\n        emit TradeAdded();\r\n\r\n    }\r\n}\r\n"
    },
    "Structs/UserJournal.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\r\npragma solidity ^0.8.7;\r\n\r\nstruct UserJournal{\r\n    bool initialized;\r\n    address journalAddress;\r\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 1000
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}